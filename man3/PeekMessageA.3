.TH PeekMessageA 3 2022-Sep-23 "WIN32" "Microsoft Windows Win32 API Documentation"
.\" ================================================================
.SH NAME
.\" ================================================================

PeekMessageA \- Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).

.\" ================================================================
.SH SYNOPSIS
.\" ================================================================

.nf
.B 
#include <winuser.h>
.PP
BOOL PeekMessageA(LPMSG \fIlpMsg\fR, HWND \fIhWnd\fR, UINT \fIwMsgFilterMin\fR, UINT \fIwMsgFilterMax\fR, UINT \fIwRemoveMsg\fR);
.PP
.nf

.\" ================================================================
.SH PARAMETERS
.\" ================================================================

LPMSG \fIlpMsg\fR [out]
.PP
.RS
A pointer to an \fBMSG(3)\fR structure that receives message information.
.RE

HWND \fIhWnd\fR [in, optional]
.PP
.RS
A handle to the window whose messages are to be retrieved. The window must belong to the current thread.

If \fIhWnd\fR is NULL, PeekMessageA(3) retrieves messages for any window that belongs to the current thread, and any messages on
the current thread's message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages
and thread messages are processed.

If \fIhWnd\fR is \fI-1\fR, PeekMessageA(3) retrieves only messages on the current thread's message queue whose \fIhwnd\fR value is NULL,
that is, thread messages as posted by PostMessage(3) (when the \fIhWnd\fR parameter is NULL) or PostThreadMessage(3).
.RE

UINT \fIwMsgFilterMin\fR [in]
.PP
.RS
The value of the first message in the range of messages to be examined. Use WM_KEYFIRST (0x0100) to specify the first keyboard message
or WM_MOUSEFIRST (0x0200) to specify the first mouse message.

If \fIwMsgFilterMin\fR and \fIwMsgFilterMax\fR are both zero (0x0), PeekMessageA(3) returns all available messages
(that is, no range filtering is performed).
.RE

UINT \fIwMsgFilterMax\fR [in]
.PP
.RS
The value of the last message in the range of messages to be examined. Use WM_KEYLAST to specify the last keyboard message or WM_MOUSELAST
to specify the last mouse message.

If \fIwMsgFilterMin\fR and \fIwMsgFilterMax\fR are both zero, PeekMessageA(3) returns all available messages
(that is, no range filtering is performed).
.RE

UINT \fIwRemoveMsg\fR [in]
.PP
.RS
Specifies how messages are to be handled. This parameter can be one or more of the following values.
.TS
tab(;) allbox;
l l.
Value;Meaning
PM_NOREMOVE 0x0000;Messages are not removed from the queue after processing by PeekMessage.
PM_REMOVE 0x0001;Messages are removed from the queue after processing by PeekMessage.
PM_NOYIELD 0x0002;T{
Prevents the system from releasing any thread that is waiting for the caller to go idle (see WaitForInputIdle).
.br
Combine this value with either PM_NOREMOVE or PM_REMOVE.
T}
.TE

By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.

.TS
allbox;
l l.
Value	Meaning
PM_QS_INPUT (QS_INPUT << 16)	Process mouse and keyboard messages.
PM_QS_PAINT (QS_PAINT << 16)	Process paint messages.
PM_QS_POSTMESSAGE ((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) << 16)	Process all posted messages, including timers and hotkeys.
PM_QS_SENDMESSAGE (QS_SENDMESSAGE << 16)	Process all sent messages.
.TE
.RE
	
.\" ================================================================
.SH RETURN VALUE
.\" ================================================================

Type: BOOL

If a message is available, the return value is nonzero.

If no messages are available, the return value is zero.

.\" ================================================================
.SH DESCRIPTION
.\" ================================================================

\fBPeekMessage\fR retrieves messages associated with the window identified by the \fIhWnd\fR parameter or any of its children as specified 
by the IsChild(3) function, and within the range of message values given by the \fIwMsgFilterMin\fR and \fIwMsgFilterMax\fR parameters. 
Note that an application can only use the low word in the \fIwMsgFilterMin\fR and \fIwMsgFilterMax\fR parameters; the high word is reserved 
for the system.

Note that PeekMessageA(3) always retrieves WM_QUIT messages, no matter which values you specify for \fIwMsgFilterMin\fR and \fIwMsgFilterMax\fR.

During this call, the system dispatches (DispatchMessage(3)) pending, nonqueued messages, that is, messages sent to windows owned by the calling
thread using the SendMessage, SendMessageCallback, SendMessageTimeout, or SendNotifyMessage function. Then the first queued message that
matches the specified filter is retrieved. The system may also process internal events. If no filter is specified, messages are processed
in the following order:

    Sent messages
    Posted messages
    Input (hardware) messages and system internal events
    Sent messages (again)
    WM_PAINT messages
    WM_TIMER messages

To retrieve input messages before posted messages, use the \fIwMsgFilterMin\fR and \fIwMsgFilterMax\fR parameters.

The PeekMessage function normally does not remove WM_PAINT messages from the queue. WM_PAINT messages remain in the queue until they
are processed. However, if a WM_PAINT message has a NULL update region, PeekMessage does remove it from the queue.

If a top-level window stops responding to messages for more than several seconds, the system considers the window to be not
responding and replaces it with a ghost window that has the same z-order, location, size, and visual attributes. This allows the
user to move it, resize it, or even close the application. However, these are the only actions available because the application
is actually not responding. When an application is being debugged, the system does not generate a ghost window.

.\" ================================================================
.SH REQUIREMENTS
.\" ================================================================
.TS
allbox;
l l.
Minimum supported client	Windows 2000 Professional [desktop apps only]
Minimum supported server	Windows 2000 Server [desktop apps only]
Target Platform	Windows
API set	ext-ms-win-ntuser-message-l1-1-0 (introduced in Windows 8)
Header	winuser.h (include Windows.h)
Library	User32.lib
DLL	User32.dll
.TE

.\" ================================================================
.SH SEE ALSO
.\" ================================================================
.nh
.BR MSG (3),
.BR DispatchMessage (3),
.BR PostMessage (3),
.BR PostThreadMessage (3)
.BR IsChild (3)

.fi
